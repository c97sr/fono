data <- read_norovirus_data(dataset =1, main_sheet_index = 1)
data
data <- read_norovirus_data(dataset =2, main_sheet_index = 1)
data
data$epi_week
rm(data)
data
data <- read_norovirus_data(dataset =1, main_sheet_index = 2)
data
library("epitools")
devtools::document()
devtools::install
devtools::install()
data <- read_norovirus_data(dataset =1, main_sheet_index = 2)
data
nsmo = 9
plot <- plot_cases_w_boxcar(data, nsmo = nsmo, ytit = global_ytit)
print(plot)
library(ggplot2)
# Function to plot dose-response curve
plot_dose_response <- function(initial_dose, half_life = 12) {
# Time points (in hours) from 0 to 48 hours
time_hours <- seq(0, 48, by = 0.1)
# Calculate concentration over time using the half-life formula
concentration <- initial_dose * exp(-log(2) / half_life * time_hours)
# Create a data frame for plotting
data <- data.frame(Time = time_hours, Concentration = concentration)
# Generate the plot
p <- ggplot(data, aes(x = Time, y = Concentration)) +
geom_line() +
labs(title = "Dose-Response Curve for Naproxen Sodium",
x = "Time (hours)",
y = "Concentration (mg/L)") +
theme_minimal()
return(p)
}
# Example usage of the function
# Assume an initial dose of 500 mg of Naproxen Sodium
example_plot <- plot_dose_response(500)
print(example_plot)
library(ggplot2)
# Function to plot dose-response curve including absorption
plot_dose_response_biphasic <- function(dose, ka, ke, Vd, duration = 48) {
# Time points (in hours) from 0 to duration hours
time_hours <- seq(0, duration, by = 0.1)
# Calculate concentration over time
concentration <- (dose * ka / (Vd * (ka - ke))) * (exp(-ke * time_hours) - exp(-ka * time_hours))
# Create a data frame for plotting
data <- data.frame(Time = time_hours, Concentration = concentration)
# Generate the plot
p <- ggplot(data, aes(x = Time, y = Concentration)) +
geom_line() +
labs
library(ggplot2)
# Function to plot dose-response curve including absorption
plot_dose_response_biphasic <- function(dose, ka, ke, Vd, duration = 48) {
# Time points (in hours) from 0 to duration hours
time_hours <- seq(0, duration, by = 0.1)
# Calculate concentration over time
concentration <- (dose * ka / (Vd * (ka - ke))) * (exp(-ke * time_hours) - exp(-ka * time_hours))
# Create a data frame for plotting
data <- data.frame(Time = time_hours, Concentration = concentration)
# Generate the plot
p <- ggplot(data, aes(x = Time, y = Concentration)) +
geom_line() +
labs(title = "Dose-Response Curve for Naproxen Sodium Including Absorption",
x = "Time (hours)",
y = "Concentration (mg/L)") +
theme_minimal()
return(p)
}
# Example usage of the function
# Assume a dose of 500 mg, ka = 1.5 /hr, ke = 0.231 /hr, Vd = 70 L
example_plot <- plot_dose_response_biphasic(dose = 500, ka = 1.5, ke = 0.231, Vd = 70)
print(example_plot)
library(ggplot2)
# Function to plot dose-response curve including multiple dosing
plot_dose_response_multiple <- function(dose, ka, ke, Vd, npills = 5, dt = 12, duration = 120) {
# Time points (in hours) from 0 to duration hours
time_hours <- seq(0, duration, by = 0.1)
# Initialize the total concentration vector
total_concentration <- rep(0, length(time_hours))
# Data frame to hold all curves
data_all <- data.frame(Time = numeric(0), Concentration = numeric(0), Dose = factor(0))
# Calculate concentration over time for each pill
for (i in 1:npills) {
start_time <- (i - 1) * dt
concentration <- ifelse(time_hours >= start_time,
(dose * ka / (Vd * (ka - ke))) *
(exp(-ke * (time_hours - start_time)) - exp(-ka * (time_hours - start_time))),
0)
total_concentration <- total_concentration + concentration
# Append to the data frame for plotting
data_all <- rbind(data_all, data.frame(Time = time_hours, Concentration = concentration, Dose = as.factor(i)))
}
# Combine the total concentration curve
data_total <- data.frame(Time = time_hours, Concentration = total_concentration, Dose = 'Total')
# Create the plot
p <- ggplot() +
geom_line(data = data_all, aes(x = Time, y = Concentration, color = Dose, linetype = Dose)) +
geom_line(data = data_total, aes(x = Time, y = Concentration, color = Dose), size = 1.2) +
scale_color_manual(values = c(rainbow(npills), "black")) +
labs(title = "Cumulative Dose-Response Curve for Multiple Doses of Naproxen Sodium",
x = "Time (hours)",
y = "Concentration (mg/L)",
color = "Dose Number") +
theme_minimal() +
guides(color = guide_legend(title = "Dose Number"), linetype = guide_legend(title = "Dose Number"))
return(p)
}
# Example usage of the function
# Assume a dose of 500 mg, ka = 1.5 /hr, ke = 0.231 /hr, Vd = 70 L, 5 pills, 12 hours apart
example_plot <- plot_dose_response_multiple(dose = 500, ka = 1.5, ke = 0.231, Vd = 70, npills = 5, dt = 12)
library(ggplot2)
# Function to plot dose-response curve including multiple dosing
plot_dose_response_multiple <- function(dose, ka, ke, Vd, npills = 5, dt = 12, duration = 120) {
# Time points (in hours) from 0 to duration hours
time_hours <- seq(0, duration, by = 0.1)
# Initialize the total concentration vector
total_concentration <- rep(0, length(time_hours))
# Data frame to hold all curves
data_all <- data.frame(Time = numeric(), Concentration = numeric(), Dose = as.factor())
# Calculate concentration over time for each pill
for (i in 1:npills) {
start_time <- (i - 1) * dt
concentration <- ifelse(time_hours >= start_time,
(dose * ka / (Vd * (ka - ke))) *
(exp(-ke * (time_hours - start_time)) - exp(-ka * (time_hours - start_time))),
0)
total_concentration <- total_concentration + concentration
# Append to the data frame for plotting
data_all <- rbind(data_all, data.frame(Time = time_hours, Concentration = concentration, Dose = as.factor(i)))
}
# Combine the total concentration curve
data_total <- data.frame(Time = time_hours, Concentration = total_concentration, Dose = 'Total')
# Create the plot
p <- ggplot() +
geom_line(data = data_all, aes(x = Time, y = Concentration, color = Dose, linetype = Dose)) +
geom_line(data = data_total, aes(x = Time, y = Concentration, color = Dose), size = 1.2) +
scale_color_manual(values = c(rainbow(npills), "black")) +
labs(title = "Cumulative Dose-Response Curve for Multiple Doses of Naproxen Sodium",
x = "Time (hours)",
y = "Concentration (mg/L)",
color = "Dose Number") +
theme_minimal() +
guides(color = guide_legend(title = "Dose Number"), linetype = guide_legend(title = "Dose Number"))
return(p)
}
# Example usage of the function
# Assume a dose of 500 mg, ka = 1.5 /hr, ke = 0.231 /hr, Vd = 70 L, 5 pills, 12 hours apart
example_plot <- plot_dose_response_multiple(dose = 500, ka = 1.5, ke = 0.231, Vd = 70, npills = 5, dt = 12)
library(ggplot2)
# Function to plot dose-response curve including multiple dosing
plot_dose_response_multiple <- function(dose, ka, ke, Vd, npills = 5, dt = 12, duration = 120) {
# Time points (in hours) from 0 to duration hours
time_hours <- seq(0, duration, by = 0.1)
# Initialize the total concentration vector
total_concentration <- rep(0, length(time_hours))
# Data frame to hold all curves
data_all <- data.frame(Time = numeric(), Concentration = numeric(), Dose = character())
# Calculate concentration over time for each pill
for (i in 1:npills) {
start_time <- (i - 1) * dt
concentration <- ifelse(time_hours >= start_time,
(dose * ka / (Vd * (ka - ke))) *
(exp(-ke * (time_hours - start_time)) - exp(-ka * (time_hours - start_time))),
0)
total_concentration <- total_concentration + concentration
# Append to the data frame for plotting
data_all <- rbind(data_all, data.frame(Time = time_hours, Concentration = concentration, Dose = as.character(i)))
}
# Convert Dose to factor after all data has been appended
data_all$Dose <- as.factor(data_all$Dose)
# Combine the total concentration curve
data_total <- data.frame(Time = time_hours, Concentration = total_concentration, Dose = 'Total')
# Create the plot
p <- ggplot() +
geom_line(data = data_all, aes(x = Time, y = Concentration, color = Dose, linetype = Dose)) +
geom_line(data = data_total, aes(x = Time, y = Concentration, color = Dose), size = 1.2) +
scale_color_manual(values = c(rainbow(npills), "black")) +
labs(title = "Cumulative Dose-Response Curve for Multiple Doses of Naproxen Sodium",
x = "Time (hours)",
y = "Concentration (mg/L)",
color = "Dose Number") +
theme_minimal() +
guides(color = guide_legend(title = "Dose Number"), linetype = guide_legend(title = "Dose Number"))
return(p)
}
# Example usage of the function
# Assume a dose of 500 mg, ka = 1.5 /hr, ke = 0.231 /hr, Vd = 70 L, 5 pills, 12 hours apart
example_plot <- plot_dose_response_multiple(dose = 500, ka = 1.5, ke = 0.231, Vd = 70, npills = 5, dt = 12)
print(example_plot)
# Assume a dose of 500 mg, ka = 1.5 /hr, ke = 0.231 /hr, Vd = 70 L, 5 pills, 12 hours apart
example_plot <- plot_dose_response_multiple(dose = 500, ka = 1.5, ke = 0.231, Vd = 70, npills = 5, dt = 6)
print(example_plot)
example_plot <- plot_dose_response_multiple(dose = 500, ka = 1.5, ke = 0.231, Vd = 70, npills = 5, dt = 3)
print(example_plot)
example_plot <- plot_dose_response_multiple(dose = 500, ka = 1.5, ke = 0.231, Vd = 70, npills = 5, dt = 4.5)
print(example_plot)
library(ggplot2)
# Function to plot dose-response curve including multiple dosing
plot_dose_response_multiple <- function(dose, ka, ke, Vd, npills = 5, dt = 12, duration = 120) {
time_hours <- seq(0, duration, by = 0.1)
total_concentration <- rep(0, length(time_hours))
data_all <- data.frame(Time = numeric(), Concentration = numeric(), Dose = character())
for (i in 1:npills) {
start_time <- (i - 1) * dt
concentration <- ifelse(time_hours >= start_time,
(dose * ka / (Vd * (ka - ke))) *
(exp(-ke * (time_hours - start_time)) - exp(-ka * (time_hours - start_time))),
0)
total_concentration <- total_concentration + concentration
data_all <- rbind(data_all, data.frame(Time = time_hours, Concentration = concentration, Dose = as.character(i)))
}
data_all$Dose <- as.factor(data_all$Dose)
data_total <- data.frame(Time = time_hours, Concentration = total_concentration, Dose = 'Total')
p <- ggplot() +
geom_line(data = data_all, aes(x = Time, y = Concentration, color = Dose, linetype = Dose)) +
geom_line(data = data_total, aes(x = Time, y = Concentration, color = Dose), size = 1.2) +
scale_color_manual(values = c(rainbow(npills), "black")) +
labs(title = "Cumulative Dose-Response Curve for Multiple Doses of Naproxen Sodium",
x = "Time (hours)", y = "Concentration (mg/L)", color = "Dose Number") +
theme_minimal() +
guides(color = guide_legend(title = "Dose Number"), linetype = guide_legend(title = "Dose Number"))
return(p)
}
# Using more realistic pharmacokinetic parameters for Naproxen
example_plot <- plot_dose_response_multiple(dose = 500, ka = 1.0, ke = 0.048
library(ggplot2)
# Function to plot dose-response curve including multiple dosing
plot_dose_response_multiple <- function(dose, ka, ke, Vd, npills = 5, dt = 12, duration = 120) {
time_hours <- seq(0, duration, by = 0.1)
total_concentration <- rep(0, length(time_hours))
data_all <- data.frame(Time = numeric(), Concentration = numeric(), Dose = character())
for (i in 1:npills) {
start_time <- (i - 1) * dt
concentration <- ifelse(time_hours >= start_time,
(dose * ka / (Vd * (ka - ke))) *
(exp(-ke * (time_hours - start_time)) - exp(-ka * (time_hours - start_time))),
0)
total_concentration <- total_concentration + concentration
data_all <- rbind(data_all, data.frame(Time = time_hours, Concentration = concentration, Dose = as.character(i)))
}
data_all$Dose <- as.factor(data_all$Dose)
data_total <- data.frame(Time = time_hours, Concentration = total_concentration, Dose = 'Total')
p <- ggplot() +
geom_line(data = data_all, aes(x = Time, y = Concentration, color = Dose, linetype = Dose)) +
geom_line(data = data_total, aes(x = Time, y = Concentration, color = Dose), size = 1.2) +
scale_color_manual(values = c(rainbow(npills), "black")) +
labs(title = "Cumulative Dose-Response Curve for Multiple Doses of Naproxen Sodium",
x = "Time (hours)", y = "Concentration (mg/L)", color = "Dose Number") +
theme_minimal() +
guides(color = guide_legend(title = "Dose Number"), linetype = guide_legend(title = "Dose Number"))
return(p)
}
# Using more realistic pharmacokinetic parameters for Naproxen
example_plot <- plot_dose_response_multiple(dose = 500, ka = 1.0, ke = 0.048, Vd = 11.2, npills = 5, dt = 12)
print(example_plot)
example_plot <- plot_dose_response_multiple(dose = 500, ka = 1.0, ke = 0.048, Vd = 11.2, npills = 10, dt = 12)
print(example_plot)
example_plot <- plot_dose_response_multiple(dose = 250, ka = 1.0, ke = 0.048, Vd = 11.2, npills = 20, dt = 6)
print(example_plot)
# Load necessary libraries
library(ggplot2)
# Reading the data
data <- read.table("Plasma_ipcr2002_01.dat", header = TRUE, sep = "", na.strings = "NA", dec = ".", strip.white = TRUE)
working_dir = "/Users/pete/Dropbox/research/charge-states/"
file = paste0(working_dir,"Plasma_ipcr2002_01.dat")
file
data <- read.table(file, header = TRUE, sep = "", na.strings = "NA", dec = ".", strip.white = TRUE)
convert_decimal_year_to_date <- function(decimal_year) {
year <- floor(decimal_year)
remainder <- decimal_year - year
days_in_year <- ifelse((year %% 4 == 0 & year %% 100 != 0) | year %% 400 == 0, 366, 365)  # Leap year check
days <- remainder * days_in_year
day_of_year <- floor(days)
hours <- (days - day_of_year) * 24
minutes <- (hours - floor(hours)) * 60
seconds <- (minutes - floor(minutes)) * 60
datetime <- as.POSIXct(sprintf("%d-%03d %02d:%02d:%05.2f", year, day_of_year, floor(hours), floor(minutes), seconds), format="%Y-%j %H:%M:%OS", tz="UTC")
return(datetime)
}
# Apply conversion
data$date <- sapply(data$Year, convert_decimal_year_to_date)
data$br <- data$br * 220689.139780073950533
data$vr <- data$vr * 481.371067364613509
data$rho <- data$rho * 1.672600000000000e-16
# Plotting br, vr, and rho
ggplot(data, aes(x = date)) +
geom_line(aes(y = br), color = "red") +
geom_line(aes(y = vr), color = "blue") +
geom_line(aes(y = rho), color = "green") +
labs(title = "Time Series of br, vr, and rho", x = "Date", y = "Values") +
theme_minimal()
# Load necessary libraries
library(ggplot2)
library(gridExtra)
# Reading the data
data <- read.table("Plasma_ipcr2002_01.dat", header = TRUE, sep = "", na.strings = "NA", dec = ".", strip.white = TRUE)
# Load necessary libraries
library(ggplot2)
library(gridExtra)
# Reading the data
working_dir = "/Users/pete/Dropbox/research/charge-states/"
file = paste0(working_dir,"Plasma_ipcr2002_01.dat")
data <- read.table(file, header = TRUE, sep = "", na.strings = "NA", dec = ".", strip.white = TRUE)
# Convert decimal year to date
# Assuming decimal year starts at Jan 1 and the decimal represents the fraction of the year
convert_decimal_year_to_date <- function(decimal_year) {
year <- floor(decimal_year)
remainder <- decimal_year - year
days_in_year <- ifelse((year %% 4 == 0 & year %% 100 != 0) | year %% 400 == 0, 366, 365)  # Leap year check
days <- remainder * days_in_year
day_of_year <- floor(days)
hours <- (days - day_of_year) * 24
minutes <- (hours - floor(hours)) * 60
seconds <- (minutes - floor(minutes)) * 60
datetime <- as.POSIXct(sprintf("%d-%03d %02d:%02d:%05.2f", year, day_of_year, floor(hours), floor(minutes), seconds), format="%Y-%j %H:%M:%OS", tz="UTC")
return(datetime)
}
# Apply conversion
data$date <- sapply(data$Year, convert_decimal_year_to_date)
# Convert units
data$br <- data$br * 220689.139780073950533
data$vr <- data$vr * 481.371067364613509
data$rho <- data$rho * 1.672600000000000e-16
# Creating individual plots
plot_br <- ggplot(data, aes(x = date, y = br)) +
geom_line(color = "red") +
labs(title = "Time Series of br", x = "Date", y = "br") +
theme_minimal()
plot_vr <- ggplot(data, aes(x = date, y = vr)) +
geom_line(color = "blue") +
labs(title = "Time Series of vr", x = "Date", y = "vr") +
theme_minimal()
plot_rho <- ggplot(data, aes(x = date, y = rho)) +
geom_line(color = "green") +
labs(title = "Time Series of rho", x = "Date", y = "rho") +
theme_minimal()
# Arrange the plots in a single column
grid.arrange(plot_br, plot_vr, plot_rho, ncol = 1)
# Load necessary libraries
library(ggplot2)
library(gridExtra)
# Reading the data
working_dir = "/Users/pete/Dropbox/research/charge-states/"
file = paste0(working_dir,"Plasma_ipcr2002_01.dat")
data <- read.table(file, header = TRUE, sep = "", na.strings = "NA", dec = ".", strip.white = TRUE)
# Convert decimal year to date
# Assuming decimal year starts at Jan 1 and the decimal represents the fraction of the year
convert_decimal_year_to_date <- function(decimal_year) {
year <- floor(decimal_year)
remainder <- decimal_year - year
days_in_year <- ifelse((year %% 4 == 0 & year %% 100 != 0) | year %% 400 == 0, 366, 365)  # Leap year check
days <- remainder * days_in_year
day_of_year <- floor(days)
hours <- (days - day_of_year) * 24
minutes <- (hours - floor(hours)) * 60
seconds <- (minutes - floor(minutes)) * 60
datetime <- as.POSIXct(sprintf("%d-%03d %02d:%02d:%05.2f", year, day_of_year, floor(hours), floor(minutes), seconds), format="%Y-%j %H:%M:%OS", tz="UTC")
return(datetime)
}
# Apply conversion
data$date <- sapply(data$Year, convert_decimal_year_to_date)
# Convert units
data$br <- data$br * 220689.139780073950533
data$vr <- data$vr * 481.371067364613509
data$rho <- data$rho * 1.672600000000000e-16
# Creating individual plots
# Load necessary libraries
library(ggplot2)
library(gridExtra)
# Creating individual plots with formatted x-axis
plot_br <- ggplot(data, aes(x = date, y = br)) +
geom_line(color = "red") +
scale_x_date(date_labels = "%Y-%m", date_breaks = "1 month") +  # Format and breaks for the x-axis
labs(title = "Time Series of br", x = "Date", y = "br") +
theme_minimal()
plot_vr <- ggplot(data, aes(x = date, y = vr)) +
geom_line(color = "blue") +
scale_x_date(date_labels = "%Y-%m", date_breaks = "1 month") +
labs(title = "Time Series of vr", x = "Date", y = "vr") +
theme_minimal()
plot_rho <- ggplot(data, aes(x = date, y = rho)) +
geom_line(color = "green") +
scale_x_date(date_labels = "%Y-%m", date_breaks = "1 month") +
labs(title = "Time Series of rho", x = "Date", y = "rho") +
theme_minimal()
# Arrange the plots in a single column
grid.arrange(plot_br, plot_vr, plot_rho, ncol = 1)
# Load necessary libraries
library(ggplot2)
library(gridExtra)
# Reading the data
working_dir = "/Users/pete/Dropbox/research/charge-states/"
file = paste0(working_dir,"Plasma_ipcr2002_01.dat")
data <- read.table(file, header = TRUE, sep = "", na.strings = "NA", dec = ".", strip.white = TRUE)
# Convert decimal year to date
# Assuming decimal year starts at Jan 1 and the decimal represents the fraction of the year
convert_decimal_year_to_date <- function(decimal_year) {
year <- floor(decimal_year)
remainder <- decimal_year - year
days_in_year <- ifelse((year %% 4 == 0 & year %% 100 != 0) | year %% 400 == 0, 366, 365)  # Leap year check
days <- remainder * days_in_year
day_of_year <- floor(days)
hours <- (days - day_of_year) * 24
minutes <- (hours - floor(hours)) * 60
seconds <- (minutes - floor(minutes)) * 60
datetime <- as.POSIXct(sprintf("%d-%03d %02d:%02d:%05.2f", year, day_of_year, floor(hours), floor(minutes), seconds), format="%Y-%j %H:%M:%OS", tz="UTC")
return(datetime)
}
# Apply conversion
data$date <- sapply(data$Year, convert_decimal_year_to_date)
# Load necessary libraries
library(ggplot2)
library(gridExtra)
# Reading the data
working_dir = "/Users/pete/Dropbox/research/charge-states/"
file = paste0(working_dir,"Plasma_ipcr2002_01.dat")
data <- read.table(file, header = TRUE, sep = "", na.strings = "NA", dec = ".", strip.white = TRUE)
# Convert decimal year to date
# Assuming decimal year starts at Jan 1 and the decimal represents the fraction of the year
convert_decimal_year_to_date <- function(decimal_year) {
year <- floor(decimal_year)
remainder <- decimal_year - year
days_in_year <- ifelse((year %% 4 == 0 & year %% 100 != 0) | year %% 400 == 0, 366, 365)  # Leap year check
days <- remainder * days_in_year
day_of_year <- floor(days)
hours <- (days - day_of_year) * 24
minutes <- (hours - floor(hours)) * 60
seconds <- (minutes - floor(minutes)) * 60
datetime <- as.POSIXct(sprintf("%d-%03d %02d:%02d:%05.2f", year, day_of_year, floor(hours), floor(minutes), seconds), format="%Y-%j %H:%M:%OS", tz="UTC")
return(datetime)
}
# Apply conversion
data$date <- sapply(data$Year, convert_decimal_year_to_date)
# Convert units
data$br <- data$br * 220689.139780073950533
data$vr <- data$vr * 481.371067364613509
data$rho <- data$rho * 1.672600000000000e-16
# Creating individual plots
# Load necessary libraries
library(ggplot2)
library(gridExtra)
plot_br <- ggplot(data, aes(x = date, y = br)) +
geom_line(color = "red") +
scale_x_date(date_labels = "%Y-%m", date_breaks = "1 month") +  # Format and breaks for the x-axis
labs(title = "Time Series of br", x = "Date", y = "br") +
theme_minimal()
plot_vr <- ggplot(data, aes(x = date, y = vr)) +
geom_line(color = "blue") +
scale_x_date(date_labels = "%Y-%m", date_breaks = "1 month") +
labs(title = "Time Series of vr", x = "Date", y = "vr") +
theme_minimal()
plot_rho <- ggplot(data, aes(x = date, y = rho)) +
geom_line(color = "green") +
scale_x_date(date_labels = "%Y-%m", date_breaks = "1 month") +
labs(title = "Time Series of rho", x = "Date", y = "rho") +
theme_minimal()
grid.arrange(plot_br, plot_vr, plot_rho, ncol = 1)
plot_br <- ggplot(data, aes(x = date, y = br)) +
geom_line(color = "red") +
scale_x_date(date_labels = "%Y-%m", date_breaks = "1 month") +
labs(title = "Time Series of br", x = "Date", y = "br") +
theme_minimal()
plot_vr <- ggplot(data, aes(x = date, y = vr)) +
geom_line(color = "blue") +
scale_x_date(date_labels = "%Y-%m", date_breaks = "1 month") +
labs(title = "Time Series of vr", x = "Date", y = "vr") +
theme_minimal()
plot_rho <- ggplot(data, aes(x = date, y = rho)) +
geom_line(color = "green") +
scale_x_date(date_labels = "%Y-%m", date_breaks = "1 month") +
labs(title = "Time Series of rho", x = "Date", y = "rho") +
theme_minimal()
grid.arrange(plot_br, plot_vr, plot_rho, ncol = 1)
class(data$date)
data$date <- as.Date(data$date)
class(data$date)
plot_br <- ggplot(data, aes(x = date, y = br)) +
geom_line(color = "red") +
scale_x_date(date_labels = "%Y-%m", date_breaks = "1 month") +
labs(title = "Time Series of br", x = "Date", y = "br") +
theme_minimal()
plot_vr <- ggplot(data, aes(x = date, y = vr)) +
geom_line(color = "blue") +
scale_x_date(date_labels = "%Y-%m", date_breaks = "1 month") +
labs(title = "Time Series of vr", x = "Date", y = "vr") +
theme_minimal()
plot_rho <- ggplot(data, aes(x = date, y = rho)) +
geom_line(color = "green") +
scale_x_date(date_labels = "%Y-%m", date_breaks = "1 month") +
labs(title = "Time Series of rho", x = "Date", y = "rho") +
theme_minimal()
grid.arrange(plot_br, plot_vr, plot_rho, ncol = 1)
data$date
data$date <- sapply(data$Year, convert_decimal_year_to_date)
data$date
plot_br <- ggplot(data, aes(x = Year, y = br)) +
geom_line(color = "red") +
labs(title = "Time Series of br", x = "Year", y = "br") +
theme_minimal()
plot_vr <- ggplot(data, aes(x = Year, y = vr)) +
geom_line(color = "blue") +
labs(title = "Time Series of vr", x = "Year", y = "vr") +
theme_minimal()
plot_rho <- ggplot(data, aes(x = Year, y = rho)) +
geom_line(color = "green") +
labs(title = "Time Series of rho", x = "Year", y = "rho") +
theme_minimal()
# Arranging plots in a single column
grid.arrange(plot_br, plot_vr, plot_rho, ncol = 1)
