devtools::document()
devtools::install()
t1 <- as.Date("2017-07-24")
t2 <- as.Date("2017-12-25")
R0 <- calc_r0(t1, t2, data)
devtools::document()
devtools::install()
annotated_plot <- add_annotations(plot, t1, t2, R0, annotate_date = as.Date("2017-10-01"), y_max)
y_max = 30
annotated_plot <- add_annotations(plot, t1, t2, R0, annotate_date = as.Date("2017-10-01"), y_max)
print(annotated_plot)
R0_text <- sprintf("R0 = %.2f", R0)
#-----------------------------------------------------------------------------
# Plotting with vertical lines at t1 and t2
y_max = 30
annotated_plot <- add_annotations(plot, t1, t2, R0_text, annotate_date = as.Date("2017-10-01"), y_max)
print(annotated_plot)
count_ts <- as.numeric(data$count)
spec <- spec.pgram(count_ts, plot = FALSE)
spec_df <- data.frame(
frequency = spec$freq,
spectrum = spec$spec
)
# Find the indices of the three largest spectrum values
top_3_indices <- order(spec_df$spectrum, decreasing = TRUE)[1:3]
plot_ps <- ggplot(spec_df, aes(x = frequency, y = spectrum)) +
geom_line() +
annotate("text", x = spec_df$frequency[top_3_indices]+0.0333, y = spec_df$spectrum[top_3_indices]-100,
label = paste0("Peak ", 1:3, ": ", round(1./spec_df$frequency[top_3_indices], 1), " weeks"),
vjust = -1, color = "blue") +
labs(title = "Power Spectrum",
x = expression(paste("Frequency (week"^-1, ")")),
y = "Spectrum") +
theme_minimal()
library(ggplot)
library(ggplot2)
count_ts <- as.numeric(data$count)
spec <- spec.pgram(count_ts, plot = FALSE)
spec_df <- data.frame(
frequency = spec$freq,
spectrum = spec$spec
)
# Find the indices of the three largest spectrum values
top_3_indices <- order(spec_df$spectrum, decreasing = TRUE)[1:3]
plot_ps <- ggplot(spec_df, aes(x = frequency, y = spectrum)) +
geom_line() +
annotate("text", x = spec_df$frequency[top_3_indices]+0.0333, y = spec_df$spectrum[top_3_indices]-100,
label = paste0("Peak ", 1:3, ": ", round(1./spec_df$frequency[top_3_indices], 1), " weeks"),
vjust = -1, color = "blue") +
labs(title = "Power Spectrum",
x = expression(paste("Frequency (week"^-1, ")")),
y = "Spectrum") +
theme_minimal()
print(plot_ps)
# compute the power spectrum
count_ts <- as.numeric(data$count)
spec <- spec.pgram(count_ts, plot = FALSE)
spec_df <- data.frame(
frequency = spec$freq,
spectrum = spec$spec
)
npeak = 3
# Find the indices of the three largest spectrum values
top_n_indices <- order(spec_df$spectrum, decreasing = TRUE)[1:npeak]
plot_ps <- ggplot(spec_df, aes(x = frequency, y = spectrum)) +
geom_line() +
annotate("text", x = spec_df$frequency[top_n_indices]+0.0333, y = spec_df$spectrum[top_n_indices]-100,
label = paste0("Peak ", 1:npeak, ": ", round(1./spec_df$frequency[top_n_indices], 1), " weeks"),
vjust = -1, color = "blue") +
labs(title = "Power Spectrum",
x = expression(paste("Frequency (week"^-1, ")")),
y = "Spectrum") +
theme_minimal()
print(plot_ps)
npeak = 4
# Find the indices of the three largest spectrum values
top_n_indices <- order(spec_df$spectrum, decreasing = TRUE)[1:npeak]
plot_ps <- ggplot(spec_df, aes(x = frequency, y = spectrum)) +
geom_line() +
annotate("text", x = spec_df$frequency[top_n_indices]+0.0333, y = spec_df$spectrum[top_n_indices]-100,
label = paste0("Peak ", 1:npeak, ": ", round(1./spec_df$frequency[top_n_indices], 1), " weeks"),
vjust = -1, color = "blue") +
labs(title = "Power Spectrum",
x = expression(paste("Frequency (week"^-1, ")")),
y = "Spectrum") +
theme_minimal()
print(plot_ps)
npeak = 2
# Find the indices of the three largest spectrum values
top_n_indices <- order(spec_df$spectrum, decreasing = TRUE)[1:npeak]
plot_ps <- ggplot(spec_df, aes(x = frequency, y = spectrum)) +
geom_line() +
annotate("text", x = spec_df$frequency[top_n_indices]+0.0333, y = spec_df$spectrum[top_n_indices]-100,
label = paste0("Peak ", 1:npeak, ": ", round(1./spec_df$frequency[top_n_indices], 1), " weeks"),
vjust = -1, color = "blue") +
labs(title = "Power Spectrum",
x = expression(paste("Frequency (week"^-1, ")")),
y = "Spectrum") +
theme_minimal()
print(plot_ps)
devtools::document()
devtools::install()
plot_ps <- plot_power_spectrum(data, npeak = 3)  # Adjust npeak as needed
print(plot_ps)
value_ts <- as.numeric(data$count)
# Compute the power spectrum
spec <- spec.pgram(value_ts, plot = FALSE)
# Perform Fisher's g-statistic test
g_stat <- sum(spec$spec) / max(spec$spec)
n <- length(value_ts)
p_value <- pchisq(g_stat, df = n/2, lower.tail = FALSE)
# Print the test result
cat("Fisher's g-statistic test:\n")
cat("g-statistic:", g_stat, "\n")
cat("p-value:", p_value, "\n")
if (p_value < 0.05) {
cat("The time series contains significant signal.\n")
} else {
cat("The time series is consistent with white noise.\n")
}
# Driver program to analyse, visualise, and perform basic forecasting of
# norovirus datasets
data <- read_norovirus_data(main_sheet_index = 2)
# Plot the data with a smoothed line
nsmo = 9
plot <- plot_cases_w_boxcar(data, nsmo = nsmo, ytit = "Cases")
print(plot)
#-----------------------------------------------------------------------------
# Now calculate R0 assumming exponential growth between t1 and t2
t1 <- as.Date("2017-07-24")
t2 <- as.Date("2017-12-25")
R0 <- calc_r0(t1, t2, data)
R0_text <- sprintf("R0 = %.2f", R0)
#-----------------------------------------------------------------------------
# Plotting with vertical lines at t1 and t2
y_max = 30
annotated_plot <- add_annotations(plot, t1, t2, R0_text, annotate_date = as.Date("2017-10-01"), y_max)
print(annotated_plot)
data
# Required libraries
if (!requireNamespace("forecast", quietly = TRUE)) {
install.packages("forecast")
}
if (!requireNamespace("ggplot2", quietly = TRUE)) {
install.packages("ggplot2")
}
library(forecast)
library(ggplot2)
# Convert the 'data' DataFrame to a time series object
ts_data <- ts(data$count, frequency = 12)  # Assuming monthly data, adjust frequency if needed
# Fit a SARIMA model to the data
sarima_model <- auto.arima(ts_data, seasonal = TRUE)
# Forecast the next 6 points (6 months)
forecast_length <- 6
sarima_forecast <- forecast(sarima_model, h = forecast_length)
# Plot the data and the forecast
plot_data <- autoplot(ts_data) +
autolayer(sarima_forecast$mean, series = "Forecast", PI = FALSE) +
autolayer(sarima_forecast, series = "Forecast", alpha = 0.3) +
labs(title = "SARIMA Forecast with Confidence Intervals",
x = "Time",
y = "Count") +
theme_minimal()
# Print the plot
print(plot_data)
# Required libraries
if (!requireNamespace("forecast", quietly = TRUE)) {
install.packages("forecast")
}
if (!requireNamespace("ggplot2", quietly = TRUE)) {
install.packages("ggplot2")
}
if (!requireNamespace("lubridate", quietly = TRUE)) {
install.packages("lubridate")
}
library(forecast)
library(ggplot2)
library(lubridate)
# Assuming 'data' DataFrame has a date column named 'epi_week' and 'count' for values
# Convert data to a time series object with weekly frequency
start_date <- min(data$epi_week)
ts_data <- ts(data$count, start = c(year(start_date), week(start_date)), frequency = 52)
# Fit a SARIMA model to the data
sarima_model <- auto.arima(ts_data, seasonal = TRUE)
# Forecast the next 12 points (12 weeks)
forecast_length <- 12
sarima_forecast <- forecast(sarima_model, h = forecast_length)
# Create a data frame with forecasted values and confidence intervals
forecast_df <- data.frame(
epi_week = seq(max(data$epi_week) + 7, by = "week", length.out = forecast_length),
forecast = sarima_forecast$mean,
lower_95 = sarima_forecast$lower[,2],
upper_95 = sarima_forecast$upper[,2]
)
# Combine original data and forecast for plotting
combined_data <- rbind(
data.frame(epi_week = data$epi_week, count = data$count, Type = "Observed"),
data.frame(epi_week = forecast_df$epi_week, count = forecast_df$forecast, Type = "Forecast")
)
# Plot the data and the forecast with confidence intervals
plot_data <- ggplot(combined_data, aes(x = epi_week, y = count, color = Type)) +
geom_line() +
geom_ribbon(data = forecast_df, aes(x = epi_week, ymin = lower_95, ymax = upper_95), fill = "blue", alpha = 0.2) +
labs(title = "SARIMA Forecast with Confidence Intervals",
x = "Date",
y = "Count") +
theme_minimal()
# Print the plot
print(plot_data)
data
# Required libraries
if (!requireNamespace("forecast", quietly = TRUE)) {
install.packages("forecast")
}
if (!requireNamespace("ggplot2", quietly = TRUE)) {
install.packages("ggplot2")
}
if (!requireNamespace("lubridate", quietly = TRUE)) {
install.packages("lubridate")
}
library(forecast)
library(ggplot2)
library(lubridate)
# Assuming 'data' DataFrame has a date column named 'epi_week' and 'count' for values
# Convert data to a time series object with weekly frequency
start_date <- min(data$epi_week)
ts_data <- ts(data$count, start = c(year(start_date), week(start_date)), frequency = 52)
# Fit a SARIMA model to the data
sarima_model <- auto.arima(ts_data, seasonal = TRUE)
# Forecast the next 12 points (12 weeks)
forecast_length <- 12
sarima_forecast <- forecast(sarima_model, h = forecast_length)
# Create a data frame with forecasted values and confidence intervals
forecast_df <- data.frame(
epi_week = seq(max(data$epi_week) + 7, by = "week", length.out = forecast_length),
forecast = sarima_forecast$mean,
lower_95 = sarima_forecast$lower[,2],
upper_95 = sarima_forecast$upper[,2]
)
# Combine original data and forecast for plotting
combined_data <- rbind(
data.frame(epi_week = data$epi_week, count = data$count, Type = "Observed"),
data.frame(epi_week = forecast_df$epi_week, count = forecast_df$forecast, Type = "Forecast")
)
# Plot the data and the forecast with confidence intervals
plot_data <- ggplot(combined_data, aes(x = epi_week, y = count, color = Type)) +
geom_line() +
geom_ribbon(data = forecast_df, aes(x = epi_week, ymin = lower_95, ymax = upper_95), fill = "blue", alpha = 0.2, inherit.aes = FALSE) +
labs(title = "SARIMA Forecast with Confidence Intervals",
x = "Date",
y = "Count") +
theme_minimal()
# Print the plot
print(plot_data)
devtools::document()
devtools::install()
devtools::document()
devtools::document()
devtools::install()
plot <- plot_sarima_forecast(data, forecast_length = 12)
plot <- plot_sarima_forecast(data, forecast_length = 12)
print(plot)
devtools::document()
devtools::install()
prediction_dates <- as.Date(c("2017-07-01", "2018-01-01", "2018-07-01"))
plot <- plot_sarima_forecasts(data, prediction_dates, forecast_length = 12)
print(plot)
devtools::document()
devtools::install()
devtools::install()
smoothed_data <- apply_boxcar_average(data, nsmo = 5)
smoothed_data <- apply_boxcar_average(data, nsmo = 5)
data
smoothed_data
prediction_dates <- as.Date(c("2017-07-01", "2018-01-01", "2018--01"))
plot <- plot_sarima_forecasts(smoothed_data, prediction_dates, forecast_length = 12)
devtools::document()
devtools::install()
smoothed_data <- apply_boxcar_average(data, nsmo = 5, edge_truncate=TRUE)
prediction_dates <- as.Date(c("2017-07-01", "2018-01-01", "2018--01"))
plot <- plot_sarima_forecasts(smoothed_data, prediction_dates, forecast_length = 12)
smoothed_data
prediction_dates <- as.Date(c("2017-07-01", "2018-01-01", "2018--01"))
plot <- plot_sarima_forecasts(data, prediction_dates, forecast_length = 12)
data <- read_norovirus_data(main_sheet_index = 2)
prediction_dates <- as.Date(c("2017-07-01", "2018-01-01", "2018--01"))
plot <- plot_sarima_forecasts(data, prediction_dates, forecast_length = 12)
prediction_dates
prediction_dates <- as.Date(c("2017-07-01", "2018-01-01", "2018-07-01"))
prediction_dates
plot <- plot_sarima_forecasts(smoothed_data, prediction_dates, forecast_length = 12)
print(plot)
smoothed_data <- apply_boxcar_average(data, nsmo = 9, edge_truncate=TRUE)
prediction_dates <- as.Date(c("2017-07-01", "2018-01-01", "2018-07-01"))
plot <- plot_sarima_forecasts(smoothed_data, prediction_dates, forecast_length = 12)
print(plot)
plot(data)
plot(data,type+"l")
plot(data,type="l")
plot(smoothed_data,type="l")
smoothed_data <- apply_boxcar_average(data, nsmo = 9, edge_truncate=TRUE)
plot(smoothed_data,type="l")
smoothed_data
data
devtools::document()
devtools::insall()
devtools::install()
#' Apply a Boxcar Running Average to Data
#'
#' @param data A data frame containing the time series data with a `count` column.
#' @param nsmo The number of points to include in the moving average window, defaults to 3.
#' @param edge_truncate A logical indicating whether to fill edge values with original values, defaults to FALSE.
#' @return A data frame with the original `epi_week` and `count` columns, where `count` contains the smoothed data.
#' @export
apply_boxcar_average <- function(data, nsmo = 3, edge_truncate = FALSE) {
# Ensure required package is loaded
if (!requireNamespace("zoo", quietly = TRUE)) {
stop("Package 'zoo' is required but is not installed.")
}
# Load required library
library(zoo)
# Check that the data contains the required column
if (!all(c("epi_week", "count") %in% names(data))) {
stop("The data frame must contain 'epi_week' and 'count' columns.")
}
# Apply the boxcar running average
smoothed <- zoo::rollmean(data$count, k = nsmo, fill = NA)
# If edge_truncate is TRUE, replace NA values with original values
if (edge_truncate) {
is_na <- is.na(smoothed)
smoothed[is_na] <- data$count[is_na]
}
# Create a new data frame with the same labels but smoothed count values
result <- data
result$count <- smoothed
return(result)
}
smoothed_data <- apply_boxcar_average(data, nsmo = 9, edge_truncate=TRUE)
smoothed_data
prediction_dates <- as.Date(c("2017-07-01", "2018-01-01", "2018-07-01"))
plot <- plot_sarima_forecasts(smoothed_data, prediction_dates, forecast_length = 12)
print(plot)
devtools::insall()
devtools::document()
devtools::document()
devtools::document()
rm(list = c("apply_boxcar_average"))
prediction_dates <- as.Date(c("2017-07-01", "2018-01-01", "2018-07-01"))
smoothed_data
plot <- plot_sarima_forecasts(smoothed_data, prediction_dates, forecast_length = 12)
print(plot)
plot <- plot_sarima_forecasts(smoothed_data, prediction_dates, forecast_length = 12)
print(plot)
plot <- plot_sarima_forecasts(smoothed_data, prediction_dates, forecast_length = 12)
prediction_dates <- as.Date(c("2017-07-03", "2017-09-01", "2018-07-01","2018-10-01"))
plot <- plot_sarima_forecasts(smoothed_data, prediction_dates, forecast_length = 12)
print(plot)
prediction_dates <- as.Date(c("2017-03-01", "2017-10-01", "2018-04-01","2018-12-01"))
plot <- plot_sarima_forecasts(smoothed_data, prediction_dates, forecast_length = 12)
prediction_dates <- as.Date(c("2017-03-01", "2017-10-01", "2018-04-01","2018-12-01"))
plot <- plot_sarima_forecasts(smoothed_data, prediction_dates, forecast_length = 12)
print(plot)
plot <- detect_change_points_cusum(smoothed_data, threshold = 5)
devtools::document()
devtools::install()
plot <- detect_change_points_cusum(smoothed_data, threshold = 5)
install.packages("qcc")
library(qcc)
plot <- detect_change_points_cusum(smoothed_data, threshold = 5)
plot <- detect_change_points_cusum(smoothed_data, threshold = 3)
plot <- detect_change_points_cusum(smoothed_data, threshold = 1)
plot <- detect_change_points_cusum(smoothed_data, threshold = 3)
print(plot)
plot <- detect_change_points_cusum(smoothed_data, threshold = 2)
print(plot)
plot <- detect_change_points_cusum(smoothed_data, threshold = 1)
print(plot)
plot <- detect_change_points_cusum(smoothed_data, threshold = 0.01)
print(plot)
plot <- detect_change_points_cusum(smoothed_data, threshold = 0.00001)
print(plot)
plot <- detect_change_points_cusum(smoothed_data, threshold = 10)
print(plot)
devtools::document()
devtools::install()
plot <- detect_change_points_cusum(smoothed_data, threshold = 5)
print(plot)
plot <- detect_change_points_cusum(smoothed_data, threshold = 3)
print(plot)
devtools::document()
devtools::install()
plot <- detect_growth_rate_changes(smoothed_data, threshold = 20)
plot <- detect_change_points_growth_rate(smoothed_data, threshold = 0.5)
plot <- detect_growth_rate_changes(data, threshold = 20)
install.packages(("readxl"))
install.packages(("ggplot2"))
install.packages("dplyr")
install.packages("gridExtra","forecast")
install.packages("gridExtra")
install.packages("forecast")
install.packages("tseries")
install.packages("magrittr")
install.packages("zoo")
data <- read_norovirus_data(main_sheet_index = 2)
data
nsmo = 9
plot <- plot_cases_w_boxcar(data, nsmo = nsmo, ytit = "Cases")
print(plot)
t1 <- as.Date("2017-07-24")
t2 <- as.Date("2017-12-25")
R0 <- calc_r0(t1, t2, data)
R0_text <- sprintf("R0 = %.2f", R0)
y_max = 30
annotated_plot <- add_annotations(plot, t1, t2, R0_text, annotate_date = as.Date("2017-10-01"), y_max)
print(annotated_plot)
t1 <- as.Date("2018-09-01")
t2 <- as.Date("2018-12-01")
R0 <- calc_r0(t1, t2, data)
R0_text <- sprintf("R0 = %.2f", R0)
y_max = 30
annotated_plot <- add_annotations(plot, t1, t2, R0_text, annotate_date = as.Date("2017-10-01"), y_max)
print(annotated_plot)
t1
t1+10
nsmo = 9
plot <- plot_cases_w_boxcar(data, nsmo = nsmo, ytit = "Cases")
print(plot)
#-----------------------------------------------------------------------------
# Now calculate R0 assumming exponential growth between t1 and t2
t1 <- as.Date("2017-07-24")
t2 <- as.Date("2017-12-25")
R0 <- calc_r0(t1, t2, data)
R0_text <- sprintf("R0 = %.2f", R0)
#-----------------------------------------------------------------------------
# Plotting with vertical lines at t1 and t2
y_max = 30
annotated_plot <- add_annotations(plot, t1, t2, R0_text, annotate_date = t1+90, y_max)
print(annotated_plot)
t1 <- as.Date("2018-09-01")
t2 <- as.Date("2018-12-01")
R0 <- calc_r0(t1, t2, data)
R0_text <- sprintf("R0 = %.2f", R0)
y_max = 30
annotated_plot2 <- add_annotations(plot, t1, t2, R0_text, annotate_date = t1+30, y_max)
print(annotated_plot2)
nsmo = 9
plot <- plot_cases_w_boxcar(data, nsmo = nsmo, ytit = "Cases")
print(plot)
#-----------------------------------------------------------------------------
# Now calculate R0 assumming exponential growth between t1 and t2
t1 <- as.Date("2017-07-24")
t2 <- as.Date("2017-12-25")
R0 <- calc_r0(t1, t2, data)
R0_text <- sprintf("R0 = %.2f", R0)
#-----------------------------------------------------------------------------
# Plotting with vertical lines at t1 and t2
y_max = 30
annotated_plot <- add_annotations(plot, t1, t2, R0_text, annotate_date = t1+90, y_max)
print(annotated_plot)
t1 <- as.Date("2018-09-01")
t2 <- as.Date("2018-12-01")
R0 <- calc_r0(t1, t2, data)
R0_text <- sprintf("R0 = %.2f", R0)
y_max = 30
annotated_plot2 <- add_annotations(annotated_plot, t1, t2, R0_text, annotate_date = t1+30, y_max)
print(annotated_plot2)
nsmo = 9
plot <- plot_cases_w_boxcar(data, nsmo = nsmo, ytit = "Cases")
print(plot)
#-----------------------------------------------------------------------------
# Now calculate R0 assumming exponential growth between t1 and t2
t1 <- as.Date("2017-07-24")
t2 <- as.Date("2017-11-01")
R0 <- calc_r0(t1, t2, data)
R0_text <- sprintf("R0 = %.2f", R0)
#-----------------------------------------------------------------------------
# Plotting with vertical lines at t1 and t2
y_max = 30
annotated_plot <- add_annotations(plot, t1, t2, R0_text, annotate_date = t1+90, y_max)
print(annotated_plot)
t1 <- as.Date("2017-07-24")
t2 <- as.Date("2017-12-01")
R0 <- calc_r0(t1, t2, data)
R0_text <- sprintf("R0 = %.2f", R0)
#-----------------------------------------------------------------------------
# Plotting with vertical lines at t1 and t2
y_max = 30
annotated_plot <- add_annotations(plot, t1, t2, R0_text, annotate_date = t1+90, y_max)
print(annotated_plot)
t1 <- as.Date("2017-07-24")
t2 <- as.Date("2017-12-15")
R0 <- calc_r0(t1, t2, data)
R0_text <- sprintf("R0 = %.2f", R0)
#-----------------------------------------------------------------------------
# Plotting with vertical lines at t1 and t2
y_max = 30
annotated_plot <- add_annotations(plot, t1, t2, R0_text, annotate_date = t1+90, y_max)
print(annotated_plot)
t1 <- as.Date("2018-09-01")
t2 <- as.Date("2018-12-01")
R0 <- calc_r0(t1, t2, data)
R0_text <- sprintf("R0 = %.2f", R0)
y_max = 30
annotated_plot2 <- add_annotations(annotated_plot, t1, t2, R0_text, annotate_date = t1+30, y_max)
print(annotated_plot2)
devtools::document()
devtools::install()
plot <- detect_change_points_pelt(smoothed_data, penalty = "BIC")
install.package("changepoint")
install.packages("changepoint")
plot <- detect_change_points_pelt(smoothed_data, penalty = "BIC")
print(plot)
