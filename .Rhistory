plot <- plot_sarima_forecast(data, forecast_length = 12)
print(plot)
devtools::document()
devtools::install()
prediction_dates <- as.Date(c("2017-07-01", "2018-01-01", "2018-07-01"))
plot <- plot_sarima_forecasts(data, prediction_dates, forecast_length = 12)
print(plot)
devtools::document()
devtools::install()
devtools::install()
smoothed_data <- apply_boxcar_average(data, nsmo = 5)
smoothed_data <- apply_boxcar_average(data, nsmo = 5)
data
smoothed_data
prediction_dates <- as.Date(c("2017-07-01", "2018-01-01", "2018--01"))
plot <- plot_sarima_forecasts(smoothed_data, prediction_dates, forecast_length = 12)
devtools::document()
devtools::install()
smoothed_data <- apply_boxcar_average(data, nsmo = 5, edge_truncate=TRUE)
prediction_dates <- as.Date(c("2017-07-01", "2018-01-01", "2018--01"))
plot <- plot_sarima_forecasts(smoothed_data, prediction_dates, forecast_length = 12)
smoothed_data
prediction_dates <- as.Date(c("2017-07-01", "2018-01-01", "2018--01"))
plot <- plot_sarima_forecasts(data, prediction_dates, forecast_length = 12)
data <- read_norovirus_data(main_sheet_index = 2)
prediction_dates <- as.Date(c("2017-07-01", "2018-01-01", "2018--01"))
plot <- plot_sarima_forecasts(data, prediction_dates, forecast_length = 12)
prediction_dates
prediction_dates <- as.Date(c("2017-07-01", "2018-01-01", "2018-07-01"))
prediction_dates
plot <- plot_sarima_forecasts(smoothed_data, prediction_dates, forecast_length = 12)
print(plot)
smoothed_data <- apply_boxcar_average(data, nsmo = 9, edge_truncate=TRUE)
prediction_dates <- as.Date(c("2017-07-01", "2018-01-01", "2018-07-01"))
plot <- plot_sarima_forecasts(smoothed_data, prediction_dates, forecast_length = 12)
print(plot)
plot(data)
plot(data,type+"l")
plot(data,type="l")
plot(smoothed_data,type="l")
smoothed_data <- apply_boxcar_average(data, nsmo = 9, edge_truncate=TRUE)
plot(smoothed_data,type="l")
smoothed_data
data
devtools::document()
devtools::insall()
devtools::install()
#' Apply a Boxcar Running Average to Data
#'
#' @param data A data frame containing the time series data with a `count` column.
#' @param nsmo The number of points to include in the moving average window, defaults to 3.
#' @param edge_truncate A logical indicating whether to fill edge values with original values, defaults to FALSE.
#' @return A data frame with the original `epi_week` and `count` columns, where `count` contains the smoothed data.
#' @export
apply_boxcar_average <- function(data, nsmo = 3, edge_truncate = FALSE) {
# Ensure required package is loaded
if (!requireNamespace("zoo", quietly = TRUE)) {
stop("Package 'zoo' is required but is not installed.")
}
# Load required library
library(zoo)
# Check that the data contains the required column
if (!all(c("epi_week", "count") %in% names(data))) {
stop("The data frame must contain 'epi_week' and 'count' columns.")
}
# Apply the boxcar running average
smoothed <- zoo::rollmean(data$count, k = nsmo, fill = NA)
# If edge_truncate is TRUE, replace NA values with original values
if (edge_truncate) {
is_na <- is.na(smoothed)
smoothed[is_na] <- data$count[is_na]
}
# Create a new data frame with the same labels but smoothed count values
result <- data
result$count <- smoothed
return(result)
}
smoothed_data <- apply_boxcar_average(data, nsmo = 9, edge_truncate=TRUE)
smoothed_data
prediction_dates <- as.Date(c("2017-07-01", "2018-01-01", "2018-07-01"))
plot <- plot_sarima_forecasts(smoothed_data, prediction_dates, forecast_length = 12)
print(plot)
devtools::insall()
devtools::document()
devtools::document()
devtools::document()
rm(list = c("apply_boxcar_average"))
prediction_dates <- as.Date(c("2017-07-01", "2018-01-01", "2018-07-01"))
smoothed_data
plot <- plot_sarima_forecasts(smoothed_data, prediction_dates, forecast_length = 12)
print(plot)
plot <- plot_sarima_forecasts(smoothed_data, prediction_dates, forecast_length = 12)
print(plot)
plot <- plot_sarima_forecasts(smoothed_data, prediction_dates, forecast_length = 12)
prediction_dates <- as.Date(c("2017-07-03", "2017-09-01", "2018-07-01","2018-10-01"))
plot <- plot_sarima_forecasts(smoothed_data, prediction_dates, forecast_length = 12)
print(plot)
prediction_dates <- as.Date(c("2017-03-01", "2017-10-01", "2018-04-01","2018-12-01"))
plot <- plot_sarima_forecasts(smoothed_data, prediction_dates, forecast_length = 12)
prediction_dates <- as.Date(c("2017-03-01", "2017-10-01", "2018-04-01","2018-12-01"))
plot <- plot_sarima_forecasts(smoothed_data, prediction_dates, forecast_length = 12)
print(plot)
plot <- detect_change_points_cusum(smoothed_data, threshold = 5)
devtools::document()
devtools::install()
plot <- detect_change_points_cusum(smoothed_data, threshold = 5)
install.packages("qcc")
library(qcc)
plot <- detect_change_points_cusum(smoothed_data, threshold = 5)
plot <- detect_change_points_cusum(smoothed_data, threshold = 3)
plot <- detect_change_points_cusum(smoothed_data, threshold = 1)
plot <- detect_change_points_cusum(smoothed_data, threshold = 3)
print(plot)
plot <- detect_change_points_cusum(smoothed_data, threshold = 2)
print(plot)
plot <- detect_change_points_cusum(smoothed_data, threshold = 1)
print(plot)
plot <- detect_change_points_cusum(smoothed_data, threshold = 0.01)
print(plot)
plot <- detect_change_points_cusum(smoothed_data, threshold = 0.00001)
print(plot)
plot <- detect_change_points_cusum(smoothed_data, threshold = 10)
print(plot)
devtools::document()
devtools::install()
plot <- detect_change_points_cusum(smoothed_data, threshold = 5)
print(plot)
plot <- detect_change_points_cusum(smoothed_data, threshold = 3)
print(plot)
devtools::document()
devtools::install()
plot <- detect_growth_rate_changes(smoothed_data, threshold = 20)
plot <- detect_change_points_growth_rate(smoothed_data, threshold = 0.5)
plot <- detect_growth_rate_changes(data, threshold = 20)
install.packages(("readxl"))
install.packages(("ggplot2"))
install.packages("dplyr")
install.packages("gridExtra","forecast")
install.packages("gridExtra")
install.packages("forecast")
install.packages("tseries")
install.packages("magrittr")
install.packages("zoo")
data <- read_norovirus_data(main_sheet_index = 2)
data
nsmo = 9
plot <- plot_cases_w_boxcar(data, nsmo = nsmo, ytit = "Cases")
print(plot)
t1 <- as.Date("2017-07-24")
t2 <- as.Date("2017-12-25")
R0 <- calc_r0(t1, t2, data)
R0_text <- sprintf("R0 = %.2f", R0)
y_max = 30
annotated_plot <- add_annotations(plot, t1, t2, R0_text, annotate_date = as.Date("2017-10-01"), y_max)
print(annotated_plot)
t1 <- as.Date("2018-09-01")
t2 <- as.Date("2018-12-01")
R0 <- calc_r0(t1, t2, data)
R0_text <- sprintf("R0 = %.2f", R0)
y_max = 30
annotated_plot <- add_annotations(plot, t1, t2, R0_text, annotate_date = as.Date("2017-10-01"), y_max)
print(annotated_plot)
t1
t1+10
nsmo = 9
plot <- plot_cases_w_boxcar(data, nsmo = nsmo, ytit = "Cases")
print(plot)
#-----------------------------------------------------------------------------
# Now calculate R0 assumming exponential growth between t1 and t2
t1 <- as.Date("2017-07-24")
t2 <- as.Date("2017-12-25")
R0 <- calc_r0(t1, t2, data)
R0_text <- sprintf("R0 = %.2f", R0)
#-----------------------------------------------------------------------------
# Plotting with vertical lines at t1 and t2
y_max = 30
annotated_plot <- add_annotations(plot, t1, t2, R0_text, annotate_date = t1+90, y_max)
print(annotated_plot)
t1 <- as.Date("2018-09-01")
t2 <- as.Date("2018-12-01")
R0 <- calc_r0(t1, t2, data)
R0_text <- sprintf("R0 = %.2f", R0)
y_max = 30
annotated_plot2 <- add_annotations(plot, t1, t2, R0_text, annotate_date = t1+30, y_max)
print(annotated_plot2)
nsmo = 9
plot <- plot_cases_w_boxcar(data, nsmo = nsmo, ytit = "Cases")
print(plot)
#-----------------------------------------------------------------------------
# Now calculate R0 assumming exponential growth between t1 and t2
t1 <- as.Date("2017-07-24")
t2 <- as.Date("2017-12-25")
R0 <- calc_r0(t1, t2, data)
R0_text <- sprintf("R0 = %.2f", R0)
#-----------------------------------------------------------------------------
# Plotting with vertical lines at t1 and t2
y_max = 30
annotated_plot <- add_annotations(plot, t1, t2, R0_text, annotate_date = t1+90, y_max)
print(annotated_plot)
t1 <- as.Date("2018-09-01")
t2 <- as.Date("2018-12-01")
R0 <- calc_r0(t1, t2, data)
R0_text <- sprintf("R0 = %.2f", R0)
y_max = 30
annotated_plot2 <- add_annotations(annotated_plot, t1, t2, R0_text, annotate_date = t1+30, y_max)
print(annotated_plot2)
nsmo = 9
plot <- plot_cases_w_boxcar(data, nsmo = nsmo, ytit = "Cases")
print(plot)
#-----------------------------------------------------------------------------
# Now calculate R0 assumming exponential growth between t1 and t2
t1 <- as.Date("2017-07-24")
t2 <- as.Date("2017-11-01")
R0 <- calc_r0(t1, t2, data)
R0_text <- sprintf("R0 = %.2f", R0)
#-----------------------------------------------------------------------------
# Plotting with vertical lines at t1 and t2
y_max = 30
annotated_plot <- add_annotations(plot, t1, t2, R0_text, annotate_date = t1+90, y_max)
print(annotated_plot)
t1 <- as.Date("2017-07-24")
t2 <- as.Date("2017-12-01")
R0 <- calc_r0(t1, t2, data)
R0_text <- sprintf("R0 = %.2f", R0)
#-----------------------------------------------------------------------------
# Plotting with vertical lines at t1 and t2
y_max = 30
annotated_plot <- add_annotations(plot, t1, t2, R0_text, annotate_date = t1+90, y_max)
print(annotated_plot)
t1 <- as.Date("2017-07-24")
t2 <- as.Date("2017-12-15")
R0 <- calc_r0(t1, t2, data)
R0_text <- sprintf("R0 = %.2f", R0)
#-----------------------------------------------------------------------------
# Plotting with vertical lines at t1 and t2
y_max = 30
annotated_plot <- add_annotations(plot, t1, t2, R0_text, annotate_date = t1+90, y_max)
print(annotated_plot)
t1 <- as.Date("2018-09-01")
t2 <- as.Date("2018-12-01")
R0 <- calc_r0(t1, t2, data)
R0_text <- sprintf("R0 = %.2f", R0)
y_max = 30
annotated_plot2 <- add_annotations(annotated_plot, t1, t2, R0_text, annotate_date = t1+30, y_max)
print(annotated_plot2)
devtools::document()
devtools::install()
plot <- detect_change_points_pelt(smoothed_data, penalty = "BIC")
install.package("changepoint")
install.packages("changepoint")
plot <- detect_change_points_pelt(smoothed_data, penalty = "BIC")
print(plot)
install.packages("ISOWeek")
install.packages("ISOweek")
library(ISOweek)
install.packages("epitools")
devtools::document()
devtools::document()
devtools::install
data <- read_norovirus_data(dataset =1, main_sheet_index = 2)
# Plot the data with a smoothed line
nsmo = 9
plot <- plot_cases_w_boxcar(data, nsmo = nsmo, ytit = global_ytit)
print(plot)
dataset =2
main_sheet_index = 1
if (dataset == 1) {
file_path <- system.file("data", "2017-2018-norovirus.xlsx", package = "fono")
} else if (dataset == 2) {
file_path <- system.file("data", "2015-2024-norovirus.xlsx", package = "fono")
} else {
print("No dataset was set.")
}
# Check if the file exists
if (file_path == "") {
stop("Data file not found in package")
}
# Read the Excel file using readxl
sheets <- readxl::excel_sheets(file_path)
data_list <- lapply(sheets, function(sheet) readxl::read_excel(file_path, sheet = sheet))
data_list
if (dataset == 2) {
ytit <- switch(main_sheet_index,
"1" = "ICD Code-A08.1 or A08.4",
"2" = "Diarrhea and Vomiting",
"3" = "Positive Labs",
"Unknown" # Default case
)
}
ytit
global_ytit <<- ytit # define a global ytit variable for plotting purposes
data <- data_list[[main_sheet_index]]
data
# Assign column names manually since the first row with data does not include headers
names(data) <- c("epi_week", "count")
datadata
data
data$epi_week <- as.Date(paste0(data$epi_week, "-1"), format = "%Y-%W-%u")
data$date <- as.numeric(epitools::as.week(data$epi_week))
dat$epi_week
data$epi_week
data <- data_list[[main_sheet_index]]
# Assign column names manually since the first row with data does not include headers
names(data) <- c("epi_week", "count")
data
data <- data_list[[main_sheet_index]]
# Assign column names manually since the first row with data does not include headers
names(data) <- c("epi_year_week", "count")
data
data$date <- as.numeric(epitools::as.week(data$epi_year_week))
data$epi_year_week
as.week(data$epi_year_week)
epitools::as.week(data$epi_year_week)
summary(data$epi_year_week)
data$epi_year_week_padded <- sprintf("%s-%02d", substr(data$epi_year_week, 1, 4), as.numeric(substr(data$epi_year_week, 6)))
data$epi_year_week
sprintf("%s-%02d", substr(data$epi_year_week, 1, 4), as.numeric(substr(data$epi_year_week, 6)))
data$epi_year_week_padded <- sprintf("%s-%02d", substr(data$epi_year_week, 1, 4), as.numeric(substr(data$epi_year_week, 6)))
data$epi_year_week_padded <- sprintf("%s-%02d",
substr(data$epi_year_week, 1, 4),  # Extract the year part
as.numeric(substr(data$epi_year_week, 6, 7)))  # Extract the week part correctly
data$epi_year_week_padded
data$date <- as.numeric(epitools::as.week(data$epi_year_week_padded))
data$epi_week <- as.Date(paste0(data$epi_year_week_padded, "-1"), format = "%Y-%W-%u")
data$epi_year_week_padded
as.week(data$epi_year_week_padded)
epitools::as.week(data$epi_year_week_padded)
data$date <- as.numeric(epitools::as.week(data$epi_year_week_padded))
# Check the first few entries to ensure proper formatting
head(data$epi_year_week_padded)
# Append "-1" to denote the first day of the week (Monday)
data$correct_dates <- as.Date(paste(data$epi_year_week_padded, "1", sep="-"), format="%Y-%W-%u")
# Check for any NAs or conversion errors
summary(data$correct_dates)
data$epi_week <- epitools::as.week(data$correct_dates)
data$correct_dates <- as.Date(paste(data$epi_year_week_padded, "1", sep="-"), format="%Y-%W-%u")
# Ensure the correct format for weeks starting from 1 (as %W starts from 00 in R)
data$correct_dates <- as.Date(paste0(data$epi_year_week_padded, "-1"), format="%Y-%W-%u")
# Checking the first few entries to ensure they are correct
head(data$correct_dates)
# Ensure the correct format for weeks starting from 1 (as %W starts from 00 in R)
data$correct_dates <- as.Date(paste0(data$epi_year_week_padded, "-1"), format="%Y-%W-%u")
# Checking the first few entries to ensure they are correct
head(data$correct_dates)
data$epi_year_week_padded <- sprintf("%s-%02d",
substr(data$epi_year_week, 1, 4),  # Extract the year part
as.numeric(substr(data$epi_year_week, 6, 7)))  # Extract the week part correctly
data$epi_year_week_padded
epiweekToDate(2013,34)
install.packages("EpiWeek")
library(EpiWeek)
library(epiweek)
data <- read_norovirus_data(dataset =1, main_sheet_index = 2)
nsmo = 9
plot <- plot_cases_w_boxcar(data, nsmo = nsmo, ytit = global_ytit)
print(plot)
data <- read_norovirus_data(dataset =2, main_sheet_index = 1)
data
nsmo = 9
plot <- plot_cases_w_boxcar(data, nsmo = nsmo, ytit = global_ytit)
print(plot)
#-----------------------------------------------------------------------------
# Plotting with vertical lines at t1 and t2
y_max = 30
annotated_plot <- add_annotations(plot, t1, t2, R0_text, annotate_date = t1+90, y_max)
print(annotated_plot)
t1 <- as.Date("2018-09-01")
t2 <- as.Date("2018-12-01")
R0 <- calc_r0(t1, t2, data)
R0_text <- sprintf("R0 = %.2f", R0)
y_max = 30
annotated_plot2 <- add_annotations(annotated_plot, t1, t2, R0_text, annotate_date = t1+30, y_max)
print(annotated_plot2)
nsmo = 9
plot <- plot_cases_w_boxcar(data, nsmo = nsmo, ytit = global_ytit)
print(plot)
#-----------------------------------------------------------------------------
# Now calculate R0 assumming exponential growth between t1 and t2
t1 <- as.Date("2017-07-24")
t2 <- as.Date("2017-12-15")
R0 <- calc_r0(t1, t2, data)
R0_text <- sprintf("R0 = %.2f", R0)
#-----------------------------------------------------------------------------
# Plotting with vertical lines at t1 and t2
y_max = 30
annotated_plot <- add_annotations(plot, t1, t2, R0_text, annotate_date = t1+90, y_max)
print(annotated_plot)
t1 <- as.Date("2018-09-01")
t2 <- as.Date("2018-12-01")
R0 <- calc_r0(t1, t2, data)
R0_text <- sprintf("R0 = %.2f", R0)
annotated_plot2 <- add_annotations(annotated_plot, t1, t2, R0_text, annotate_date = t1+30, y_max)
print(annotated_plot2)
t1 <- as.Date("2022-10-15")
t2 <- as.Date("2023-03-01")
R0 <- calc_r0(t1, t2, data)
R0_text <- sprintf("R0 = %.2f", R0)
annotated_plot3 <- add_annotations(annotated_plot2, t1, t2, R0_text, annotate_date = t1+30, y_max)
print(annotated_plot3)
plot_ps <- plot_power_spectrum(data, npeak = 3)  # Adjust npeak as needed
print(plot_ps)
plot <- plot_sarima_forecast(data, forecast_length = 12)
smoothed_data <- apply_boxcar_average(data, nsmo = 9, edge_truncate=TRUE)
prediction_dates <- as.Date(c("2017-07-01", "2018-01-01", "2018-07-01"))
prediction_dates <- as.Date(c("2017-03-01", "2017-10-01", "2018-04-01","2018-12-01"))
plot <- plot_sarima_forecasts(smoothed_data, prediction_dates, forecast_length = 12)
plot <- detect_change_points_cusum(smoothed_data, threshold = 3)
print(plot)
plot <- detect_growth_rate_changes(smoothed_data, threshold = 20)
plot <- detect_change_points_growth_rate(smoothed_data, threshold = 0.5)
plot <- detect_change_points_pelt(smoothed_data, penalty = "Manual", pen.value = 24)
print(plot)
devtools::document()
devtools::install
devtools::install
devtools::install
plot <- identify_onset_exponential_rise(data)
print(plot)
plot_rise_1 <- identify_onset_exponential_rise_1(data, nsmo = 9)
plot_rise_1 <- identify_onset_exponential_rise_1(data, nsmo = 9)
devtools::document()
devtools::install
plot_rise_1 <- identify_onset_exponential_rise_1(data, nsmo = 9)
print(plot_rise_1)
plot <- identify_onset_exponential_rise(data, nsmo = 9, threshold_multiplier = 1)
print(plot)
devtools::document()
plot <- identify_onset_exponential_rise(data, nsmo = 9, threshold_multiplier = 1)
print(plot)
plot <- identify_onset_exponential_rise(data, nsmo = 9, threshold_multiplier = 1)
plot <- identify_onset_exponential_rise(data, nsmo = 9, threshold_multiplier = 2)
plot <- identify_onset_exponential_rise(data, nsmo = 9, threshold_multiplier = 1)
print(plot)
plot <- identify_onset_exponential_rise(data, nsmo = 9, threshold_multiplier = 2)
print(plot)
plot <- identify_onset_exponential_rise(data, nsmo = 15, threshold_multiplier = 1)
plot <- identify_onset_exponential_rise(data, nsmo = 15, threshold_multiplier = 1.5)
print(plot)
devtools::document()
plot <- identify_troughs(data, nsmo = 9)
print(plot)
plot <- identify_onset_exponential_rise(data, nsmo = 9, threshold_multiplier = 2)
print(plot)
plot <- identify_troughs(data, nsmo = 15)
print(plot)
library(devtools)
load_all("/Users/pete/Dropbox/shared/CSMB03/norovirus-fl/fono")
plot <- identify_troughs(data, nsmo = 15)
print(plot)
plot <- identify_troughs(data, nsmo = 9)
print(plot)
load_all("/Users/pete/Dropbox/shared/CSMB03/norovirus-fl/fono")
plot <- identify_troughs(data, nsmo = 15)
print(plot)
plot <- identify_troughs(data, nsmo = 8)
print(plot)
plot <- identify_troughs(data, nsmo = 5)
print(plot)
load_all("/Users/pete/Dropbox/shared/CSMB03/norovirus-fl/fono")
plot <- identify_troughs(data, nsmo = 8)
print(plot)
plot <- identify_troughs(data, nsmo = 3)
print(plot)
plot <- identify_troughs(data, nsmo = 20)
print(plot)
plot <- identify_troughs(data, nsmo = 15)
print(plot)
plot <- identify_troughs(data, nsmo = 12)
print(plot)
load_all("/Users/pete/Dropbox/shared/CSMB03/norovirus-fl/fono")
plot <- identify_troughs(data, nsmo = 12)
print(plot)
load_all("/Users/pete/Dropbox/shared/CSMB03/norovirus-fl/fono")
plot <- identify_troughs(data, nsmo = 12)
print(plot)
plot <- identify_troughs(data, nsmo = 18)
print(plot)
plot <- identify_troughs(data, nsmo = 24)
print(plot)
rm(list=ls())
graphics.off()
library(R.matlab)
install.packages("R.matlab")
library(R.matlab)
library(lubridate)
library(dplyr)
library(gridExtra)
library(reshape2)
install.packages("reshape2")
library(lubridate)
library(dplyr)
library(gridExtra)
library(reshape2)
source('util.R')
pwd
$pwd
rm(list=ls())
graphics.off()
library(R.matlab)
library(ggplot2)
library(lubridate)
library(dplyr)
library(gridExtra)
library(reshape2)
source('util.R')
library(devtools)
load_all("/Users/pete/Dropbox/shared/CSMB03/norovirus-fl/fono")
data <- read_norovirus_data(dataset =1, main_sheet_index = 2)
data()
load_all("/Users/pete/Dropbox/shared/CSMB03/norovirus-fl/fono")
data <- read_norovirus_data(dataset =1, main_sheet_index = 2)
data <- read_norovirus_data(dataset =2, main_sheet_index = 1)
